#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

const unsigned char gauge_cluster [] PROGMEM = {
	0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x07, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x23, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x64, 0xa4, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x04, 0x80, 0x0c, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x24, 0xa4, 0x03, 0x00, 0x00, 0x00, 0x01, 0x98, 0x03, 0x02, 0x33, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x24, 0xa4, 0x00, 0x80, 0x00, 0x00, 0x06, 0x20, 0x04, 0x86, 0x48, 0xc0, 0x00, 
	0x00, 0x04, 0x00, 0x73, 0x18, 0x00, 0x40, 0x00, 0x00, 0x08, 0x38, 0x03, 0x02, 0x48, 0x20, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x10, 0x24, 0x00, 0x02, 0x48, 0x10, 0x00, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x60, 0x18, 0x00, 0x07, 0x30, 0x0e, 0x00, 
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x01, 0x19, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x18, 0x00, 0x00, 0x00, 0x03, 0x25, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x01, 0x08, 0x80, 
	0x02, 0xf3, 0x00, 0x00, 0x00, 0x09, 0xe6, 0x80, 0x04, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x10, 0x40, 
	0x04, 0x84, 0x80, 0x00, 0x00, 0x19, 0x09, 0x40, 0x08, 0x08, 0x00, 0x00, 0x00, 0x03, 0xbc, 0x20, 
	0x08, 0xe4, 0x80, 0x00, 0x00, 0x09, 0xc9, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
	0x08, 0x14, 0x80, 0x00, 0x00, 0x08, 0x29, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x10, 0xe3, 0x00, 0x00, 0x00, 0x1d, 0xc6, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x34, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x54, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7a, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 
	0x98, 0x00, 0x00, 0x07, 0xc0, 0x00, 0xc6, 0x33, 0x30, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0x19, 
	0xa4, 0x00, 0x00, 0x0f, 0xe0, 0x01, 0x29, 0x4b, 0x48, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x03, 0x21, 
	0xa4, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x49, 0x4b, 0x48, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x01, 0x39, 
	0xa4, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x89, 0x4b, 0x48, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x01, 0x25, 
	0x98, 0x00, 0x00, 0x07, 0xc0, 0x01, 0xe6, 0x33, 0x30, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x03, 0x99, 
	0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 
	0x43, 0x9c, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x22, 0xe4, 0x82, 
	0x42, 0x52, 0xd8, 0x04, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x36, 0x94, 0x82, 
	0x43, 0x9c, 0xa8, 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x02, 0x00, 0x2a, 0xe7, 0x82, 
	0x42, 0x90, 0x88, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x22, 0x84, 0x82, 
	0x22, 0x50, 0x88, 0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x22, 0x84, 0x84, 
	0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 
	0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 
	0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 
	0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x20, 
	0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 
	0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 
	0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x80, 
	0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 
	0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 
	0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 
	0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x0c, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
	0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00
};

const int RPM_needle_anchor_coordinates[2] = {32, 32};    // Coordinates for RPM needle pivot (center of gauge)
const int speed_needle_anchor_coordinates[2] = {96, 32};  // Coordinates for speed needle pivot (center of gauge)


#define OLED_RESET -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup_display() {
  display.setTextColor(SSD1306_WHITE); //Set text color to white
  display.setCursor(0, 0);
  display.drawBitmap(0, 0, gauge_cluster, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE); // Draw the gauge cluster bitmap
}

void update_RPM_gauge(int new_RPM){
      display.clearDisplay(); // Clear the display before drawing new content
      setup_display();
      display.drawLine(
        RPM_needle_anchor_coordinates[0],
        RPM_needle_anchor_coordinates[1],
        RPM_needle_anchor_coordinates[0] + round(20 * cos((180.0 - new_RPM) * (PI / 180.0))),
        RPM_needle_anchor_coordinates[1] - round(20 * sin((180.0 - new_RPM) * (PI / 180.0))),
        SSD1306_WHITE
      );
      display.display(); // Update the display with new content
}

void update_speed_gauge(int new_speed){
      display.clearDisplay(); // Clear the display before drawing new content
      setup_display();
      display.drawLine(
        speed_needle_anchor_coordinates[0],
        speed_needle_anchor_coordinates[1],
        speed_needle_anchor_coordinates[0] + round(20 * cos((180.0 - new_speed) * (PI / 180.0))),
        speed_needle_anchor_coordinates[1] - round(20 * sin((180.0 - new_speed) * (PI / 180.0))),
        SSD1306_WHITE
      );
      display.display(); // Update the display with new content
}

void update_gauges(int new_RPM, int new_speed) {
    update_RPM_gauge(new_RPM); // Update RPM gauge
    update_speed_gauge(new_speed); // Update speed gauge
}


void setup() {
  Serial.begin(9600); // Initialize serial communication for debugging
  //Initialize the display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever if display init fails
  }

  Serial.println(F("OLED initialized successfully!"));

  // Clear the buffer
  display.clearDisplay();

  // Set text size, color, and cursor position
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);

  display.drawBitmap(0, 0, gauge_cluster, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  // Display the content of the buffer on the OLED screen
  display.display();
}


int engine_RPM = 0;
void loop() {

    if(Serial.available()){
      int RPM_input = Serial.parseInt(); //Read RPM input from serial
      Serial.read();   //Clear buffer
      engine_RPM = map(RPM_input, 0, 2000, 0, 180); //Map RPM input to angle (0-180 degrees)
      Serial.print(F("Received RPM: "));
      Serial.println(RPM_input);
      update_RPM_gauge(engine_RPM);  // Update the RPM gauge with the new value
      Serial.println(F("Updated RPM needle on display."));
    }


}